load "Element_P3" //load P3 elements

//definition of the exact solution and source term
func uex = sin(pi*x)*sin(pi*y);
func fex = 2*(pi^2)*sin(pi*x)*sin(pi*y);

//domain defining borders
border S1(t=0,1) {x=t;y=0;label=1;}
border S2(t=0,1) {x=1;y=t;label=2;}
border S3(t=0,1) {x=1+(0.875-1)*t;y=1;label=3;}
border S4(t=0,1) {x=0.875+(0.125-0.875)*t;y=1;label=4;}
border S5(t=0,1) {x=0.125-0.125*t;y=1;label=5;}
border S6(t=0,1) {x=0;y=1-t;label=6;}
border S7(t=0,1) {x=0.875;y=0.95+(1-0.95)*t;}
border S8(t=0,1) {x=0.125+(0.875-0.125)*t;y=0.95;}
border S9(t=0,1) {x=0.125;y=1+(0.95-1)*t;}
border S10(t=0,1) {x=0.125;y=0.95+(0.25-0.95)*t;}
border S11(t=0,1) {x=0.125+(0.875-0.125)*t;y=0.25;}
border S12(t=0,1) {x=0.875;y=0.25+(0.95-0.25)*t;}

int w =1;
int degree =3;
//initial mesh size
real NN=20,
    NNi=2;

//Building and adapting the mesh
mesh Th = buildmesh(S1(NN)+S2(NN)+S3(NNi)+S4(NN)+S5(NNi)+S6(NN)+S7(NNi)+S8(NN)+S9(NNi)+S10(NN)+S11(NN)+S12(NN));

//defining the regions
int regi = Th(0.5,0.5).region; //B
int regx = Th(0.01,0.01).region; //varpi
int regh = Th(0.5,0.99).region; //Omega\(B U varpi)

real gamma = 0.0001, //stabilazation term coefficient 1
     beta = 0.001; //stabilzation term coefficient 2
//define and solve the problem
fespace Vh3(Th,[P3,P3]);
Vh3 [u3,xi3],[v3,eta3];
fespace Wh3(Th,P3);
Wh3 uexh3=uex,fexh3=fex;

fespace Ph(Th,P0);
Ph H = hTriangle;
real h = H[].max;

macro dN(u3) (dx(u3)*N.x+dy(u3)*N.y) //
macro grad(u3) [dx(u3),dy(u3)] //
macro lap(u3) (dxx(u3)+dyy(u3)) //

solve Pb3([u3,xi3],[v3,eta3]) = 
    int2d(Th,regx)( u3*v3 ) + int2d(Th)( grad(xi3)'*grad(v3)  + grad(u3)'*grad(eta3)- grad(xi3)'*grad(eta3)) 
    + intalledges(Th)(0.5*gamma*(nTonEdge-1)*h*jump(dN(u3))*jump(dN(v3)) ) + int2d(Th)(beta*(h^(2*degree))*lap(u3)*lap(v3))
    + int2d(Th)( gamma * (h^(2*degree)) * u3 * v3 )
    - intalledges(Th)(0.5*gamma*(nTonEdge-1)*h*jump(dN(xi3))*jump(dN(eta3))) - int2d(Th,regx)(uexh3*v3) - int2d(Th)(fexh3*eta3) 
    + int2d(Th)(beta*(h^(2*degree))*fexh3*lap(v3))
    + on(1,2,3,4,5,6,xi3=0);

//plot the mesh
plot(Th,wait=w);

//plot the solution
plot(u3,wait=w,fill=1,value=1,dim=3,cmm="u P3");

//compute the error and its norm
Wh3 err3 = u3-uexh3; //compute the error
plot(err3,wait=w,fill=1,value=1,dim=3,cmm="err P3"); //plot the error
real h1norm3 = sqrt(int2d(Th,regi)(err3^2 + dx(err3)^2 + dy(err3)^2)); //compute the norm of the error
