load "Element_P3" //load P3 elements
load "ffrandom" //load the random library
srandomdev();

//settings
real bornsup = 2.^31-1.; //MAX_RAND
real sigma=10^(-3); //noise stddev
//initial mesh size
real NN=15.,
     NNi=3.;
real r = 2; //rate
int nbiter = 3; //number of iterations in the loop

real gamma = 0.001, //stabilazation term coefficient 1
     beta = 0.001; //stabilzation term coefficient 2

int w = 0; //wait parameter
int plotnoise = 1; //plot the noise parameter

//func noise = sigma*sqrt(-2*log(random()/bornsup))*cos(2*pi*random()/bornsup);
func fex = 2*(pi^2)*sin(pi*x)*sin(pi*y) ;
func uex = sin(pi*x)*sin(pi*y);
//func measure = uex + noise;

//where to stock the output
ofstream DATA1("C:/Users/khfz2/Desktop/Pro_docs/2A/PRe/FreeFem2/FreeFem/bruit_P1.txt"); //P1 results
ofstream DATA2("C:/Users/khfz2/Desktop/Pro_docs/2A/PRe/FreeFem2/FreeFem/bruit_P2.txt"); //P2 results
ofstream DATA3("C:/Users/khfz2/Desktop/Pro_docs/2A/PRe/FreeFem2/FreeFem/bruit_P3.txt"); //P3 results

//domain defining borders
border S1(t=0,1) {x=t;y=0;label=1;}
border S2(t=0,1) {x=1;y=t;label=2;}
border S3(t=0,1) {x=1+(0.875-1)*t;y=1;label=3;}
border S4(t=0,1) {x=0.875+(0.125-0.875)*t;y=1;label=4;}
border S5(t=0,1) {x=0.125-0.125*t;y=1;label=5;}
border S6(t=0,1) {x=0;y=1-t;label=6;}
border S7(t=0,1) {x=0.875;y=0.95+(1-0.95)*t;}
border S8(t=0,1) {x=0.125+(0.875-0.125)*t;y=0.95;}
border S9(t=0,1) {x=0.125;y=1+(0.95-1)*t;}
border S10(t=0,1) {x=0.125;y=0.95+(0.25-0.95)*t;}
border S11(t=0,1) {x=0.125+(0.875-0.125)*t;y=0.25;}
border S12(t=0,1) {x=0.875;y=0.25+(0.95-0.25)*t;}

//Building and adapting the mesh
mesh Th = buildmesh(S1(NN)+S2(NN)+S3(NN)+S4(NN)+S5(NN)+S6(NN)+S7(NN)+S8(NN)+S9(NN)+S10(NN)+S11(NN)+S12(NN));
//mesh Th = buildmesh(S1(NN)+S2(NN)+S3(NNi)+S4(NN)+S5(NNi)+S6(NN)+S7(NNi)+S8(NN)+S9(NNi)+S10(NN)+S11(NN)+S12(NN));

//defining the regions
int regi = Th(0.5,0.5).region; //B
int regx = Th(0.01,0.01).region; //varpi
int regh = Th(0.5,0.99).region; //Omega\(B U varpi)


for (int i=0;i<nbiter;i++) { /////////////Loop over h
    //Building and adapting the mesh
    mesh Th = buildmesh(S1(NN)+S2(NN)+S3(NN)+S4(NN)+S5(NN)+S6(NN)+S7(NN)+S8(NN)+S9(NN)+S10(NN)+S11(NN)+S12(NN));
    //mesh Th = buildmesh(S1(NN)+S2(NN)+S3(NNi)+S4(NN)+S5(NNi)+S6(NN)+S7(NNi)+S8(NN)+S9(NNi)+S10(NN)+S11(NN)+S12(NN));
    
    //get the value of h
    fespace Ph(Th,P0);
    Ph H = hTriangle;
    real h = H[].max;

    for (int degree=1;degree<=3;degree++) {  //loop over degree
            if (degree==1) { //P1 elements

            //define and solve the problem
            fespace Vh1(Th,[P1,P1]);
            Vh1 [u1,xi1],[v1,eta1];
            fespace Wh1(Th,P1);
            
            srandomdev();
            func noise = sigma*sqrt(-2*log(random()/bornsup))*cos(2*pi*random()/bornsup);
            func measure = uex + noise;
            Wh1 uexh1=uex,fexh1=fex,g1=measure,n1=noise;

            macro dN(u1) (dx(u1)*N.x+dy(u1)*N.y) //
            macro grad(u1) [dx(u1),dy(u1)] //
            macro lap(u1) (dxx(u1)+dyy(u1)) //

            solve Pb1([u1,xi1],[v1,eta1]/*,solver=Crout*/) = 
                int2d(Th,regx)( u1*v1 ) + int2d(Th)( grad(xi1)'*grad(v1)  + grad(u1)'*grad(eta1)- grad(xi1)'*grad(eta1)) 
                + intalledges(Th)(0.5*gamma*(nTonEdge-1)*h*jump(dN(u1))*jump(dN(v1)) ) + int2d(Th)(beta*(h^(2*degree))*lap(u1)*lap(v1))
                + int2d(Th)( gamma * (h^(2*degree)) * u1 * v1 )
                - intalledges(Th)(0.5*gamma*(nTonEdge-1)*h*jump(dN(xi1))*jump(dN(eta1))) - int2d(Th,regx)(g1*v1) - int2d(Th)(fexh1*eta1) 
                + int2d(Th)(beta*(h^(2*degree))*fexh1*lap(v1))
                + on(1,2,3,4,5,6,xi1=0);
            
            //plot the mesh
            plot(Th,wait=w);

            //plot the soiny source term
            plot(g1,wait=w,fill=1,value=1,dim=3,cmm="g P1");
            if (plotnoise==1)
                //plot the noise
                plot(n1,wait=w,fill=1,value=1,dim=3,cmm="noise P1");
            //plot the solution
            plot(u1,wait=w,fill=1,value=1,dim=3,cmm="u P1");

            //compute the error and its norm
            Wh1 err1 = u1-uexh1; //compute the error
            plot(err1,wait=w,fill=1,value=1,dim=3,cmm="err P1"); //plot the error
            real h1norm1 = sqrt(int2d(Th,regi)(err1^2 + dx(err1)^2 + dy(err1)^2)); //compute the norm of the error

            DATA1 << h <<" "<< h1norm1 <<endl; //output the result to the external file
            }

            if (degree==2) { //P2 elements

            //define and solve the problem
            fespace Vh2(Th,[P2,P2]);
            Vh2 [u2,xi2],[v2,eta2];
            fespace Wh2(Th,P2);

            srandomdev();
            func noise = sigma*sqrt(-2*log(random()/bornsup))*cos(2*pi*random()/bornsup);
            func measure = uex + noise;

            Wh2 uexh2=uex,fexh2=fex,g2=measure,n2=noise;

            macro dN(u2) (dx(u2)*N.x+dy(u2)*N.y) //
            macro grad(u2) [dx(u2),dy(u2)] //
            macro lap(u2) (dxx(u2)+dyy(u2)) //

            solve Pb2([u2,xi2],[v2,eta2]) = 
                int2d(Th,regx)( u2*v2 ) + int2d(Th)( grad(xi2)'*grad(v2)  + grad(u2)'*grad(eta2)- grad(xi2)'*grad(eta2)) 
                + intalledges(Th)(0.5*gamma*(nTonEdge-1)*h*jump(dN(u2))*jump(dN(v2)) ) + int2d(Th)(beta*(h^(2*degree))*lap(u2)*lap(v2))
                + int2d(Th)( gamma * (h^(2*degree)) * u2 * v2 )
                - intalledges(Th)(0.5*gamma*(nTonEdge-1)*h*jump(dN(xi2))*jump(dN(eta2))) - int2d(Th,regx)(g2*v2) - int2d(Th)(fexh2*eta2) 
                + int2d(Th)(beta*(h^(2*degree))*fexh2*lap(v2))
                + on(1,2,3,4,5,6,xi2=0);

            //plot the mesh
            plot(Th,wait=w);

            //plot the noisy source term
            plot(g2,wait=w,fill=1,value=1,dim=3,cmm="g P2");
            if (plotnoise==1)
                //plot the noise
                plot(n2,wait=w,fill=1,value=1,dim=3,cmm="noise P2");
            //plot the solution
            plot(u2,wait=w,fill=1,value=1,dim=3,cmm="u P2");

            //compute the error and its norm
            Wh2 err2 = u2-uexh2; //compute the error
            plot(err2,wait=w,fill=1,value=1,dim=3,cmm="err P2"); //plot the error
            real h1norm2 = sqrt(int2d(Th,regi)(err2^2 + dx(err2)^2 + dy(err2)^2)); //compute the norm of the error

            DATA2 << h <<" "<< h1norm2<<endl; //output the result to the external file
            }

            if (degree==3) { //P3 elements

            //define and solve the problem
            fespace Vh3(Th,[P3,P3]);
            Vh3 [u3,xi3],[v3,eta3];
            fespace Wh3(Th,P3);
            
            srandomdev();
            func noise = sigma*sqrt(-2*log(random()/bornsup))*cos(2*pi*random()/bornsup);
            func measure = uex + noise;

            Wh3 uexh3=uex,fexh3=fex,g3=measure,n3=noise;

            macro dN(u3) (dx(u3)*N.x+dy(u3)*N.y) //
            macro grad(u3) [dx(u3),dy(u3)] //
            macro lap(u3) (dxx(u3)+dyy(u3)) //

            solve Pb3([u3,xi3],[v3,eta3]) = 
                int2d(Th,regx)( u3*v3 ) + int2d(Th)( grad(xi3)'*grad(v3)  + grad(u3)'*grad(eta3)- grad(xi3)'*grad(eta3)) 
                + intalledges(Th)(0.5*gamma*(nTonEdge-1)*h*jump(dN(u3))*jump(dN(v3)) ) + int2d(Th)(beta*(h^(2*degree))*lap(u3)*lap(v3))
                + int2d(Th)( gamma * (h^(2*degree)) * u3 * v3 )
                - intalledges(Th)(0.5*gamma*(nTonEdge-1)*h*jump(dN(xi3))*jump(dN(eta3))) - int2d(Th,regx)(g3*v3) - int2d(Th)(fexh3*eta3) 
                + int2d(Th)(beta*(h^(2*degree))*fexh3*lap(v3))
                + on(1,2,3,4,5,6,xi3=0);

            //plot the mesh
            plot(Th,wait=w);

            //plot the noisy source term
            plot(g3,wait=w,fill=1,value=1,dim=3,cmm="g P3");
            if (plotnoise==1)
                //plot the noise
                plot(n3,wait=w,fill=1,value=1,dim=3,cmm="noise P3");
            //plot the solution
            plot(u3,wait=w,fill=1,value=1,dim=3,cmm="u P3");

            //compute the error and its norm
            Wh3 err3 = u3-uexh3; //compute the error
            plot(err3,wait=w,fill=1,value=1,dim=3,cmm="err P3"); //plot the error
            real h1norm3 = sqrt(int2d(Th,regi)(err3^2 + dx(err3)^2 + dy(err3)^2)); //compute the norm of the error

            DATA3 << h <<" "<< h1norm3<<endl; //output the result to the external file
            }
        }

        cout<<"i= "<<i<<", NN ="<<NN<<", NNi ="<<NNi<<endl;
        //update the mesh size
        NN*=r;
        NNi*=r;
      }